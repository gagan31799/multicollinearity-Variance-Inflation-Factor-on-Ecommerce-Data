# -*- coding: utf-8 -*-
"""Ecommerce website

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEeqvb3HT0DnFYeiHyu2aPwq4qlq7rxd

### Problem Statement

Implement multiple linear regression to create a predictive model capable of predicting the yearly amount spent by the customers in shopping from an Ecommerce website. Find out if there exists multicollinearity in the dataset using Variance Inflation Factor.

---

### List of Activities
 
**Activity 1:** Analysing the Dataset

**Activity 2:** Exploratory Data Analysis

**Activity 3:** Train-Test Split
 
**Activity 4:** Model Training using `statsmodels.api`
 
**Activity 5:** Calculate VIF using `variance_inflation_factor`

---

#### Activity 1:  Analysing the Dataset
 
- Create a Pandas DataFrame for **ecommerce-customers** dataset using the below link. This dataset consists of following columns:

|Columns|Description|
|--|--|
|Email|Email ID of the customer|
|Address|Address of the customer|
|Avatar|Color Avatar|
|Avg. Session Length|Average session of in-store style advice sessions|
|Time on App|Average time spent on App in minutes |
|Time on Website|Average time spent on Website in minutes |
|Length of Membership|How many years the customer has been a member|
|Yearly Amount Spent|Amount spent on items yearly|



   **Dataset Link:**  https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/ecommerce-customers.csv
 
- Print the first five rows of the dataset. Check for null values and treat them accordingly.
- Also, drop the columns `Email`, `Address` and `Avatar` as they are not required for further analysis.
"""

# Import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/ecommerce-customers.csv')
df.head()

# Load the dataset 

# Print first five rows using head() function

# Check if there are any null values. If any column has null values, treat them accordingly

df.isna().sum()

# Drop unnecessary columns
df.drop(columns=['Email','Address','Avatar'],axis=1,inplace=True)
df.head()

"""---

#### Activity 2: Exploratory Data Analysis

Create the scatter plots between each independent variables and the target variable. Determine which independent variable(s) shows linear relationship with the target variable `Yearly Amount Spent`.
"""

# Create scatter plot with 'Avg. Session Length' on X-axis and 'Yearly Amount Spent' on Y-axis

plt.figure(figsize=(15,4))
plt.scatter(df['Avg. Session Length'],df['Yearly Amount Spent'])
plt.title('Scatter plot with Avg. Session Length on X-axis and Yearly Amount Spent on Y-axis')
plt.xlabel('Avg. Session Length')
plt.ylabel('Yearly Amount Spent')
plt.show()

# Create scatter plot with 'Time on App' on X-axis and 'Yearly Amount Spent' on Y-axis

plt.figure(figsize=(15,4))
plt.scatter(df['Time on App'],df['Yearly Amount Spent'])
plt.title('Scatter plot with Time on App on X-axis and Yearly Amount Spent on Y-axis')
plt.xlabel('Time on App')
plt.ylabel('Yearly Amount Spent')
plt.show()

# Create scatter plot with 'Time on Website' on X-axis and 'Yearly Amount Spent' on Y-axis
plt.figure(figsize=(15,4))
plt.scatter(df['Time on Website'],df['Yearly Amount Spent'])
plt.title('Scatter plot with Time on Website on X-axis and Yearly Amount Spent on Y-axis')
plt.xlabel('Time on Website')
plt.ylabel('Yearly Amount Spent')
plt.show()

# Create scatter plot with 'Length of Membership' on X-axis and 'Yearly Amount Spent' on Y-axis

plt.figure(figsize=(15,4))
plt.scatter(df['Length of Membership'],df['Yearly Amount Spent'])
plt.title('Scatter plot with Length of Membership on X-axis and Yearly Amount Spent on Y-axis')
plt.xlabel('Length of Membership')
plt.ylabel('Yearly Amount Spent')
plt.show()

"""**Q:** Based on the scatter plots, which independent variable seems to have the best linear relationship with the target variable?

**A:** Length of Membership'

---

#### Activity 3: Train-Test Split
 
We need to predict the value of `Yearly Amount Spent` variable, using other variables. Thus, `Yearly Amount Spent` is the target or dependent variable and other columns except `Yearly Amount Spent` are the features or the independent variables.
 
Split the dataset into training set and test set such that the training set contains 70% of the instances and the remaining instances will become the test set.
"""

# Split the DataFrame into the training and test sets.


from sklearn.model_selection import train_test_split

X=df.drop('Yearly Amount Spent',axis=1)
y = df['Yearly Amount Spent']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

"""---

#### Activity 4: Model Training using `statsmodels.api`

Perform the following tasks:
- Implement multiple linear regression using `statsmodels.api` module and find the values of all the regression coefficients using this module.
-Print the statistical summary of the regression model.
"""

# Build a linear regression model using the 'statsmodels.api' module.

import statsmodels.api as sm
  # Add a constant to feature variables 

X_train_sm = sm.add_constant(X_train)
# Fit the regression line using 'OLS'
lr = sm.OLS(y_train,X_train_sm).fit()
# Print the parameters, i.e. the intercept and the slope of the regression line fitted
lr.params

# Print statistical summary of the model 
print(lr.summary())

"""**Q:** What is the $R^2$ (R-squared) value for this model?

**A:** 0.985

-----

#### Activity 5: Calculate VIF using `variance_inflation_factor`

Calculate the VIF values for each independent variables using the `variance_inflation_factor` function of the `statsmodels.stats.outliers_influence` module.
"""

# Calculate the VIF values for each independent variable using the 'variance_inflation_factor' function.
from statsmodels.stats.outliers_influence import variance_inflation_factor

# Create a dataframe that will contain the names of all the feature variables and their respective VIFs

vif=pd.DataFrame()
vif['Features']=X_train_sm.columns
vif['VIF']=[ variance_inflation_factor(X_train_sm.values,i) for i in range(X_train_sm.values.shape[1])]
vif['VIF']=round(vif['VIF'],2)
vif=vif.sort_values(by='VIF',ascending=False)
vif